from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from tgbot.misc import cute_cat
from tgbot.misc.exchange_rates import get_exchange_rate
# from tgbot.keyboards.inline import cities_kb
from tgbot.misc.states import BotStates
from tgbot.misc.weather import get_weather


async def start_or_help_commands(message: Message) -> None:
    """
    Handles /start and /help commands
    :param message:
    :return:
    """
    await message.reply(
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\nüëá",
    )


async def weather_command(message: Message) -> None:
    """
    Handles /weather command
    :param message:
    :return:
    """
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É",
        # reply_markup=cities_kb,
    )
    await BotStates.Weather.set()


async def weather_city(message: Message, state: FSMContext) -> None:
    """
    :param message:
    :param state:
    :return:
    """
    weather = get_weather(message.text, message.bot['config'].weather_api_key)
    if weather is None:
        await message.answer(f"–ì–æ—Ä–æ–¥ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await state.finish()
    else:
        await message.reply(
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ <b>{message.text}</b>: {weather['description']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <code>{weather['temperature']}¬∞C</code>\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <code>{weather['feels_like']}¬∞C</code>\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: <code>{weather['humidity']}%</code>\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <code>{weather['wind_speed']} –º/—Å</code>",
        )
    await state.finish()


async def convert_command(message: Message) -> None:
    """
    Handles /convert command
    :param message:
    :return:
    """
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, —á—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É\n"
        "–ü—Ä–∏–º–µ—Ä: 100 usd rub",
    )
    await BotStates.Convert.set()


async def convert_currency(message: Message, state: FSMContext) -> None:
    """
    Handles currency conversion
    :param message:
    :param state:
    :return:
    """
    amount, base, target = message.text.split()
    exchange_rate = get_exchange_rate(float(amount), base, target, message.bot['config'].exchange_api_key)
    if exchange_rate is None:
        await message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    else:
        await message.reply(f"<code>{amount}</code> {base} = <code>{exchange_rate}</code> {target}")
    await state.finish()


async def cat_command(message: Message) -> None:
    """
    Handles /cat command and sends random cat picture
    :param message:
    :return:
    """
    cat = cute_cat.get_cat_picture(message.bot['config'].cat_api_key)
    if cat is None:
        await message.reply("–ö–æ—Ç–∏–∫–æ–≤ –Ω–µ –Ω–∞—à–ª–æ—Å—å")
    else:
        await message.reply_photo(cat)


async def poll_command(message: Message) -> None:
    """
    Handles /poll command
    :param message:
    :return:
    """
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "–ü—Ä–∏–º–µ—Ä: –ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã –ª—é–±–∏—Ç–µ –±–æ–ª—å—à–µ?, –í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü, –ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã",
    )


async def cancel_command(message: Message, state: FSMContext) -> None:
    """
    Handles /cancel command
    :param message:
    :param state:
    :return:
    """
    await message.reply(
        "–û—Ç–º–µ–Ω–µ–Ω–æ",
    )
    await state.finish()


async def undefined_message(message: Message) -> None:
    """
    Handles messages not caught by other handlers
    :param message:
    :return:
    """
    await message.reply(
        "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞\nüëá",
    )


def register_user(dp: Dispatcher):
    # Cancel command handler should be registered before other handlers
    dp.register_message_handler(cancel_command, commands=['cancel'], state='*')

    dp.register_message_handler(start_or_help_commands, commands=['start', 'help'], state='*')
    dp.register_message_handler(weather_command, commands=['weather'], state='*')
    dp.register_message_handler(weather_city, state=BotStates.Weather)
    dp.register_message_handler(convert_command, commands=['convert'], state='*')
    dp.register_message_handler(convert_currency, state=BotStates.Convert)
    dp.register_message_handler(cat_command, commands=['cat'], state='*')
    dp.register_message_handler(poll_command, commands=['poll'], state='*')

    # Handler of undefined messages should be registered last
    dp.register_message_handler(undefined_message, state='*')
